name: Coverity Scan

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  coverity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download and Install Coverity Tool
        run: |
          wget https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" \
            -O coverity_tool.tgz
          mkdir coverity_tool
          tar -xvzf coverity_tool.tgz -C coverity_tool --strip-components=1
          export PATH=$PWD/coverity_tool/bin:$PATH
          echo "Coverity Tool installed successfully"

      - name: Build with Coverity
        run: |
            sudo apt update && sudo apt install -y \
                build-essential \
                clang \
                cmake \
                ninja-build \
                python3 \
                qt6-base-dev \
                qt6-positioning-dev \
                libc++-dev \
                libfreetype-dev \
                libglvnd-dev \
                libgl1-mesa-dev \
                libharfbuzz-dev \
                libicu-dev \
                libqt6svg6-dev \
                libqt6positioning6-plugins \
                libqt6positioning6 \
                libsqlite3-dev \
                zlib1g-dev
            git submodule update --init --recursive
            bash configure.sh
            bash tools/unix/build_omim.sh -r desktop
      - name: Compress with bzip2
        run: |
          tar cjvf myproject.tar.bz2 cov-int
        id: compress
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false

      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        run: |
          curl --data "project=${{ github.repository }}&token=${{ secrets.COVERITY_TOKEN }}&email=cpp.benchmark@proton.me\
            &url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2\
            &version=1.0&description=Automated+Coverity+Scan"\
            https://scan.coverity.com/builds
